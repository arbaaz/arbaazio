{
  "posts": [
    {
      "reward": { "type": "xlm" },
      "sourcedFromGithub": false,
      "githubAsSourceMeta": null,
      "isAnonymous": false,
      "views": 316,
      "slugOverridden": false,
      "coverImage": "",
      "autoGeneratedCover": "https://hcti.io/v1/image/fff77cbb-dd7b-4397-89f8-a37b85dcd51a",
      "brief": "Bindings are nothing but  FFI \nAccording to wiki:\n\nA foreign function interface (FFI) is a mechanism by which a program written in one programming language can call routines or make use of services written in another.\n\nReScript bindings are just an u...",
      "content": "<p>Bindings are nothing but  <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Foreign_function_interface\">FFI</a> </p>\n<p>According to wiki:</p>\n<blockquote>\n<p>A foreign function interface (FFI) is a mechanism by which a program written in one programming language can call routines or make use of services written in another.</p>\n</blockquote>\n<p>ReScript bindings are just an unsafe direct-access mechanism to the JS world. Just some external declarations and some type definitions.</p>\n<p>In this post, we are going to write few bindings for the antd library.</p>\n<p>Let's get started with a very simple component that doesn't accept any props or children.</p>\n<h3 id=\"named-import\">Named Import</h3>\n<h4 id=\"component\">Component</h4>\n<pre><code><span class=\"hljs-comment\">// closeCircleOutlined.jsx</span>\n<span class=\"hljs-keyword\">import</span> { CloseOutlined } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@ant-design/icons'</span>\n<span class=\"hljs-comment\">/* npm install --save @ant-design/icons */</span>\n\nReactDOM.render(\n <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">CloseOutlined</span> /&gt;</span></span>,\n  mountNode,\n);\n</code></pre><h4 id=\"binding\">Binding:</h4>\n<pre><code><span class=\"hljs-comment\">// Bindings.res</span>\nmodule CloseCircleOutlined = {\n <span class=\"hljs-meta\">@module(<span class=\"hljs-meta-string\">\"@ant-design/icons\"</span>)</span> <span class=\"hljs-meta\">@react</span>.component\n <span class=\"hljs-keyword\">external</span> make: React.element = <span class=\"hljs-string\">\"CloseCircleOutlined\"</span>\n}\n</code></pre><h3 id=\"default-import\">Default Import</h3>\n<pre><code><span class=\"hljs-comment\">// Bindings.res</span>\n\n<span class=\"hljs-comment\">// import CloseOutlined from '@ant-design/icons'</span>\nmodule CloseOutlined = {\n <span class=\"hljs-meta\">@module(<span class=\"hljs-meta-string\">\"@ant-design/icons\"</span>)</span> <span class=\"hljs-meta\">@react</span>.component\n <span class=\"hljs-keyword\">external</span> make: React.element = <span class=\"hljs-string\">\"default\"</span>\n}\n</code></pre><p>I'm assuming you know what decorators are. If you haven't read about them before then you can read <a target=\"_blank\" href=\"https://rescript-lang.org/docs/manual/latest/attribute\">here</a></p>\n<p>The <strong> basic structure </strong> is </p>\n<pre><code>module ComponentName = {\n <span class=\"hljs-meta\">@module(<span class=\"hljs-meta-string\">\"&lt;node_module_name&gt;\"</span>)</span> <span class=\"hljs-meta\">@react</span>.component\n <span class=\"hljs-keyword\">external</span> make: React.element = <span class=\"hljs-string\">\"&lt;NamedImport&gt; or &lt;default&gt;\"</span>\n}\n</code></pre><p>This component doesn't accept any props yet.  </p>\n<p>Let's write another binding for a <a target=\"_blank\" href=\"https://ant.design/components/button/\">button</a>. </p>\n<h4 id=\"component\">Component:</h4>\n<pre><code><span class=\"hljs-keyword\">import</span> { Button } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'antd'</span>;\n\nReactDOM.render(\n  <span class=\"xml\"><span class=\"hljs-tag\">&lt;&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">shape</span>=<span class=\"hljs-string\">\"circle\"</span>&gt;</span>Circle Button<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">shape</span>=<span class=\"hljs-string\">\"round\"</span>&gt;</span>Round Button<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/&gt;</span></span>,\n  mountNode,\n);\n</code></pre><h4 id=\"binding\">Binding:</h4>\n<p>Copy the structure and fill in the names.</p>\n<pre><code><span class=\"hljs-comment\">// Bindings.res</span>\nmodule Button = {\n <span class=\"hljs-meta\">@module(<span class=\"hljs-meta-string\">\"antd\"</span>)</span> <span class=\"hljs-meta\">@react</span>.component\n <span class=\"hljs-keyword\">external</span> make: React.element = <span class=\"hljs-string\">\"Button\"</span>\n}\n</code></pre><p>At this point, you can only use the button as </p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span>/&gt;</span>\n</code></pre><p>not as</p>\n<pre><code><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Button</span> <span class=\"hljs-attr\">shape</span>=<span class=\"hljs-string\">\"circle\"</span>&gt;</span>Text<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Button</span>&gt;</span>\n</code></pre><h3 id=\"props\">Props</h3>\n<p>Let's add a <code>shape</code> prop.</p>\n<pre><code><span class=\"hljs-comment\">// Bindings.res</span>\n<span class=\"hljs-keyword\">module</span> Button = {\n <span class=\"hljs-meta\">@module</span>(<span class=\"hljs-string\">\"antd\"</span>) <span class=\"hljs-meta\">@react</span>.component\n external make: <span class=\"hljs-function\">(<span class=\"hljs-params\">~shape:<span class=\"hljs-built_in\">string</span></span>) =&gt;</span> React.element = <span class=\"hljs-string\">\"Button\"</span>\n}\n</code></pre><p>Remember, we have to declare each <strong>prop</strong> as a  <strong>Named argument.</strong></p>\n<h3 id=\"keyword-prop\">Keyword prop</h3>\n<p>Now, here is a little tricky one. Let's add a <code>type</code> prop. </p>\n<pre><code><span class=\"hljs-comment\">// Bindings.res</span>\n<span class=\"hljs-keyword\">module</span> Button = {\n <span class=\"hljs-meta\">@module</span>(<span class=\"hljs-string\">\"antd\"</span>) <span class=\"hljs-meta\">@react</span>.component\n external make: <span class=\"hljs-function\">(<span class=\"hljs-params\">~\\<span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-built_in\">string</span>, ~shape:<span class=\"hljs-built_in\">string</span></span>) =&gt;</span> React.element = <span class=\"hljs-string\">\"Button\"</span>\n}\n</code></pre><p><code>type</code> is a keyword in a rescript so whenever we use a  <strong>keyword</strong> we have to escape it.</p>\n<h3 id=\"children\">Children</h3>\n<p>To accept the <strong>child component</strong>, we will use <code>children</code> named argument </p>\n<pre><code><span class=\"hljs-comment\">// Bindings.res</span>\n<span class=\"hljs-keyword\">module</span> Button = {\n <span class=\"hljs-meta\">@module</span>(<span class=\"hljs-string\">\"antd\"</span>) <span class=\"hljs-meta\">@react</span>.component\n external make: <span class=\"hljs-function\">(<span class=\"hljs-params\">~children:React.element, ~shape:<span class=\"hljs-built_in\">string</span>, ~\\<span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-built_in\">string</span></span>) =&gt;</span> React.element = <span class=\"hljs-string\">\"Button\"</span>\n}\n</code></pre><pre><code><span class=\"hljs-comment\">// App.res</span>\nReactDOM.render(\n &lt;Button \\<span class=\"hljs-string\">\"type\"</span>=<span class=\"hljs-string\">\"primary\"</span> shape=<span class=\"hljs-string\">\"circle\"</span>&gt;{React.<span class=\"hljs-keyword\">string</span>(<span class=\"hljs-string\">\"Click me\"</span>)}&lt;/Button&gt;, \n mountNode\n)\n</code></pre><h3 id=\"react-prop\">React prop</h3>\n<pre><code><span class=\"hljs-comment\">// Bindings.res</span>\n<span class=\"hljs-keyword\">module</span> Button = {\n <span class=\"hljs-meta\">@module</span>(<span class=\"hljs-string\">\"antd\"</span>) <span class=\"hljs-meta\">@react</span>.component\n external make: <span class=\"hljs-function\">(<span class=\"hljs-params\">~icon: React.element, ~children:React.element, ~shape:<span class=\"hljs-built_in\">string</span>, ~\\<span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-built_in\">string</span></span>) =&gt;</span> React.element = <span class=\"hljs-string\">\"Button\"</span>\n}\n</code></pre><pre><code><span class=\"hljs-comment\">// App.res</span>\nReactDOM.render(\n &lt;Button icon={&lt;DownloadOutlined /&gt;} shape=<span class=\"hljs-string\">\"circle\"</span> \\<span class=\"hljs-string\">\"type\"</span>=<span class=\"hljs-string\">\"primary\"</span>&gt;{React.<span class=\"hljs-keyword\">string</span>(<span class=\"hljs-string\">\"Click me\"</span>)}&lt;/Button&gt;, \n mountNode\n)\n</code></pre><p>That's all folks!</p>\n",
      "contentMarkdown": "\nBindings are nothing but  [FFI](https://en.wikipedia.org/wiki/Foreign_function_interface) \n\nAccording to wiki:\n> A foreign function interface (FFI) is a mechanism by which a program written in one programming language can call routines or make use of services written in another.\n\nReScript bindings are just an unsafe direct-access mechanism to the JS world. Just some external declarations and some type definitions.\n\nIn this post, we are going to write few bindings for the antd library.\n\nLet's get started with a very simple component that doesn't accept any props or children.\n\n### Named Import \n\n#### Component\n```\n// closeCircleOutlined.jsx\nimport { CloseOutlined } from '@ant-design/icons'\n/* npm install --save @ant-design/icons */\n\nReactDOM.render(\n <CloseOutlined />,\n  mountNode,\n);\n```\n#### Binding: \n```\n// Bindings.res\nmodule CloseCircleOutlined = {\n @module(\"@ant-design/icons\") @react.component\n external make: React.element = \"CloseCircleOutlined\"\n}\n\n```\n\n\n### Default Import\n```\n// Bindings.res\n\n// import CloseOutlined from '@ant-design/icons'\nmodule CloseOutlined = {\n @module(\"@ant-design/icons\") @react.component\n external make: React.element = \"default\"\n}\n\n```\n\nI'm assuming you know what decorators are. If you haven't read about them before then you can read [here](https://rescript-lang.org/docs/manual/latest/attribute)\n\nThe ** basic structure ** is \n```\nmodule ComponentName = {\n @module(\"<node_module_name>\") @react.component\n external make: React.element = \"<NamedImport> or <default>\"\n}\n\n```\n\n\nThis component doesn't accept any props yet.  \n\nLet's write another binding for a [button](https://ant.design/components/button/). \n\n#### Component:\n```\nimport { Button } from 'antd';\n\nReactDOM.render(\n  <>\n    <Button shape=\"circle\">Circle Button</Button>\n    <Button shape=\"round\">Round Button</Button>\n  </>,\n  mountNode,\n);\n```\n#### Binding:\nCopy the structure and fill in the names.\n```\n// Bindings.res\nmodule Button = {\n @module(\"antd\") @react.component\n external make: React.element = \"Button\"\n}\n\n```\n\n\nAt this point, you can only use the button as \n```\n<Button/>\n```\nnot as\n```   \n<Button shape=\"circle\">Text</Button>\n```\n### Props\n\nLet's add a `shape` prop.\n```\n// Bindings.res\nmodule Button = {\n @module(\"antd\") @react.component\n external make: (~shape:string) => React.element = \"Button\"\n}\n```\nRemember, we have to declare each **prop** as a  **Named argument.**\n\n### Keyword prop\nNow, here is a little tricky one. Let's add a `type` prop. \n```\n// Bindings.res\nmodule Button = {\n @module(\"antd\") @react.component\n external make: (~\\\"type\": string, ~shape:string) => React.element = \"Button\"\n}\n```\n`type` is a keyword in a rescript so whenever we use a  **keyword** we have to escape it.\n\n### Children\nTo accept the **child component**, we will use `children` named argument \n```\n// Bindings.res\nmodule Button = {\n @module(\"antd\") @react.component\n external make: (~children:React.element, ~shape:string, ~\\\"type\": string) => React.element = \"Button\"\n}\n```\n```\n// App.res\nReactDOM.render(\n <Button \\\"type\"=\"primary\" shape=\"circle\">{React.string(\"Click me\")}</Button>, \n mountNode\n)\n```\n\n\n\n\n### React prop\n```\n// Bindings.res\nmodule Button = {\n @module(\"antd\") @react.component\n external make: (~icon: React.element, ~children:React.element, ~shape:string, ~\\\"type\": string) => React.element = \"Button\"\n}\n```\n\n```\n// App.res\nReactDOM.render(\n <Button icon={<DownloadOutlined />} shape=\"circle\" \\\"type\"=\"primary\">{React.string(\"Click me\")}</Button>, \n mountNode\n)\n```\n\nThat's all folks!",
      "hasPolls": false,
      "totalPollVotes": 0,
      "upvotes": 0,
      "downvotes": 0,
      "tags": [
        "568f5c6beea132481d017c36",
        "56744721958ef13879b94cad",
        "56744723958ef13879b95434"
      ],
      "untaggedFrom": [],
      "upvotedBy": [],
      "downvotedBy": [],
      "popularity": 4903.776,
      "responses": [],
      "responseCount": 0,
      "replyCount": 0,
      "followers": [],
      "isActive": true,
      "isFeatured": false,
      "isEngaging": false,
      "answeredByTarget": false,
      "inviters": [],
      "isDelisted": false,
      "isNotified": false,
      "duplicatePosts": [],
      "numCollapsed": 0,
      "hasReward": false,
      "bookmarkedIn": [],
      "similarPostIds": [],
      "reactions": [],
      "totalReactions": 0,
      "reactionsByCurrentUser": [],
      "totalReactionsByCurrentUser": 0,
      "isPinnedToBlog": false,
      "disableComments": false,
      "commentsPaused": false,
      "hasLatex": false,
      "syncAlgolia": false,
      "enableToc": false,
      "toc": [],
      "numUniqueUsersWhoReacted": 0,
      "_id": "6122f5e0e404793819cab9c7",
      "title": "How to write rescript bindings for a react library",
      "subtitle": "",
      "type": "story",
      "ogImage": "",
      "metaTitle": "How to write rescript bindings for a react library",
      "metaDescription": "ReScript bindings are just an unsafe direct-access mechanism to the JS world.",
      "isRepublished": false,
      "originalArticleURL": "",
      "partOfPublication": true,
      "publication": "60ab47fe5379f65d10b627b5",
      "slug": "how-to-write-rescript-bindings-for-a-react-library",
      "importedFromMedium": false,
      "dateAdded": "2021-08-23T01:12:00.296Z",
      "hasCustomDate": false,
      "stickCoverToBottom": false,
      "pollOptions": [],
      "badges": [],
      "questionReplies": [],
      "contributors": [],
      "cuid": "cksny28hc12kw2xs1e94peb0j",
      "author": "60ab47da5379f65d10b627b1",
      "followersCount": 1,
      "draft": "60b052dd9b1e2e1dccbcbbf3",
      "hasPinnedTag": false,
      "readTime": 3,
      "__v": 0,
      "series": null,
      "dateUpdated": "2021-08-23T08:40:34.723Z",
      "pendingPublicationApproval": false,
      "viewsUpdatedOn": 1672986663510,
      "uniqueReactions": [],
      "reactionToCountMapUnique": { "any": 1 },
      "id": "6122f5e0e404793819cab9c7"
    },
    {
      "reward": { "type": "xlm" },
      "sourcedFromGithub": false,
      "githubAsSourceMeta": null,
      "isAnonymous": false,
      "views": 535,
      "slugOverridden": false,
      "coverImage": "https://cdn.hashnode.com/res/hashnode/image/upload/v1622252134947/ddHJUzsas.jpeg",
      "autoGeneratedCover": "",
      "brief": "We all know how important ' Decision Making' is for success, yet we make wrong decisions often. While it's easier to make the big decisions, it's harder to make the smaller ones. What we don't realize is that the sum of these tiny choices determine o...",
      "content": "<p>We all know how important <strong>' Decision Making'</strong> is for success, yet we make wrong decisions often. While it's easier to make the big decisions, it's harder to make the smaller ones. What we don't realize is that the sum of these tiny choices determine our success in life. </p>\n<p>We know how to think, plan, and execute big decisions like choosing a career path or marriage or where to live. We prepare, set aside time and space for it. </p>\n<p>But when it comes to the tiny ones, like when to sleep or having that one glass of cold lemonade on a summer night, that might give you a sore throat, it's harder for you to plan like you would for the big ones. You do it and face the unintended consequences.</p>\n<p>Today, we have more 'choices' than we can count for any given thing. Psychologist Barry Schwartz says in  <a target=\"_blank\" href=\"https://www.ted.com/talks/barry_schwartz_the_paradox_of_choice?language=en#t-470586\">\"Paradox of Choice\"</a> that while more choices allow us to achieve better results, they also lead to greater anxiety, indecision, and dissatisfaction. </p>\n<p>With freedom of choice comes the responsibility to make the right ones.</p>\n<p>Failing to know these <strong> 'tiny' dos and don'ts</strong> might affect our <strong>momentum</strong> in essential tasks. </p>\n<p>Let's see how can we fix them in 5 easy steps </p>\n<h2 id=\"1-make-it-clear\">1. Make it Clear</h2>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1622252179605/DMtYL5Ftk.png\" alt /></p>\n<p>According to <a target=\"_blank\" href=\"https://psychology.stackexchange.com/questions/17182/basis-for-we-make-35-000-decisions-a-day-statistic/17184#17184?newreg=6c5ad36acbcc463daefdc4d90304c492\">some sources</a>, we make thousands of decisions every day. </p>\n<p>We can't make decisions upon decisions without paying a biological cost. Decisions have an unseen biological cost that we can't see and neglect.</p>\n<blockquote>\n<p>No matter how expert you may be, well-designed checklists can improve outcomes. -- Steven Levitt</p>\n</blockquote>\n<p>Just knowing 'clearly' what you need to do or not is half the battle won. Write down activities that you need to do, as well as avoid them to be more productive. Things like - what to eat, what to wear, when to shop, how to use your apps, morning routines, sleep routines, etc.</p>\n<h2 id=\"2-cut-it-out\">2. Cut it Out</h2>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1622252203188/yyQzXGDZZ.jpeg\" alt=\"Productivity  5.jpg\" /></p>\n<p>When we make too many decisions, we suffer from <strong><a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Decision_fatigue\">Decision Fatigue</a></strong>. It leaves us with less energy for mentally demanding tasks, <a target=\"_blank\" href=\"https://www.scientificamerican.com/article/don-t-overthink-it-less-is-more-when-it-comes-to-creativity/\">killing creativity</a>, drive and, in turn, affects happiness.</p>\n<blockquote>\n<p>The essence of strategy is choosing what not to do ― Michael Porter</p>\n</blockquote>\n<p>Cutting out every unnecessary or unmade decision makes room and energy for productive ones. According to a <a target=\"_blank\" href=\"https://www.ics.uci.edu/~gmark/chi08-mark.pdf\">University of California Irvine study.</a>, it takes an average of 23 minutes to get back to a task after an interruption.</p>\n<p><strong>Try to estimate your focused time in a day as well as the cost of time breaks or energy leaks.</strong> \nTo build momentum and maintain it. Simplify your day and daily routine with habits.</p>\n<h2 id=\"3-time-it-space-it\">3. Time It, Space It</h2>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1622252217370/GIEHQNCPA.jpeg\" alt=\"Productivity3.jpg\" />\nMornings are the natural way to start life. It's no wonder <a target=\"_blank\" href=\"https://youtu.be/qszsMyrChnE\">most successful people start super early</a>. After a good night's sleep, our body and brain are charged up for best performance. </p>\n<p>Make a list of priorities - starting with the most challenging task because your brain is fresh and ready to handle it earlier in the day. <a target=\"_blank\" href=\"https://www.pnas.org/content/pnas/108/17/6889.full.pdf\">Studies</a> have shown how the time of day affects good decision making and productivity.</p>\n<blockquote>\n<p>\"In preparing for battle, I have always found that plans are useless, but planning is indispensable.\" ― Dwight D. Eisenhower</p>\n</blockquote>\n<p>As there's no such thing as 'stability' in life, make mental and practical space to account for new or unexpected situations. Take breaks or a quick nap to recharge during the day. Intentionally STOP making decisions. \nLeave room for new beginnings which usually take time and space, and let your brain sort things at its own pace.</p>\n<h2 id=\"4-make-it-right\">4. Make it Right</h2>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1622252229991/2iPsZHHA_.jpeg\" alt=\"Productivity 4.jpg\" />\nIdentify your purpose – and make sure it's right. Please write down your goals and objectives to achieve them, and review them. Everything you do during the day, week, and year must align with this purpose, getting more efficient with time. Build habits around your goals.</p>\n<blockquote>\n<p>If you have a strong purpose in life, you don't have to be pushed. Your passion will drive you there. ― Roy T. Bennett</p>\n</blockquote>\n<p>Get a second opinion or some sound advice on your ideas to avoid your own cognitive biases. And be ready to iterate on your decisions based on outcomes. Iterative decision-making is faster, efficient, and leads to better results.</p>\n<p>It doesn't matter how 'right' our choice is, but how motivated and committed we are to make it right. Having an actionable plan with the best decision is what leads to a success story.</p>\n<h2 id=\"5-just-do-it\">5. Just Do It</h2>\n<p>No amount of thinking or planning can take you closer to your goals. You have to give it a try and get started. Take action and be ready to fail. But pick yourself up and try again. Or change the course.</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1622252267328/2XOHfUquJ.jpeg\" alt=\"Productivity 6.jpg\" /></p>\n<blockquote>\n<p>\"Unless commitment is made, there are only promises and hopes; but no plans.\" ― Peter F. Drucker</p>\n</blockquote>\n<p>In summary, decision-making is more exhausting than any other mental activity.\nIt's a lot of tiny things that make you or break you. So be mindful of how you regard them. Understand the proven and sustainable methods that seem dull or straightforward, but work. \nTweak them to suit your purpose. Avoid all sorts of distractions as much as possible. Respect your mind and body. </p>\n<p>Believe in yourself, work hard and stay healthy!</p>\n",
      "contentMarkdown": "We all know how important **' Decision Making'** is for success, yet we make wrong decisions often. While it's easier to make the big decisions, it's harder to make the smaller ones. What we don't realize is that the sum of these tiny choices determine our success in life. \n\nWe know how to think, plan, and execute big decisions like choosing a career path or marriage or where to live. We prepare, set aside time and space for it. \n\nBut when it comes to the tiny ones, like when to sleep or having that one glass of cold lemonade on a summer night, that might give you a sore throat, it's harder for you to plan like you would for the big ones. You do it and face the unintended consequences.\n\nToday, we have more 'choices' than we can count for any given thing. Psychologist Barry Schwartz says in  [\"Paradox of Choice\"](https://www.ted.com/talks/barry_schwartz_the_paradox_of_choice?language=en#t-470586) that while more choices allow us to achieve better results, they also lead to greater anxiety, indecision, and dissatisfaction. \n\nWith freedom of choice comes the responsibility to make the right ones.\n\nFailing to know these ** 'tiny' dos and don'ts** might affect our **momentum** in essential tasks. \n\nLet's see how can we fix them in 5 easy steps \n\n## 1. Make it Clear\n![](https://cdn.hashnode.com/res/hashnode/image/upload/v1622252179605/DMtYL5Ftk.png)\n\nAccording to [some sources](https://psychology.stackexchange.com/questions/17182/basis-for-we-make-35-000-decisions-a-day-statistic/17184#17184?newreg=6c5ad36acbcc463daefdc4d90304c492), we make thousands of decisions every day. \n\nWe can't make decisions upon decisions without paying a biological cost. Decisions have an unseen biological cost that we can't see and neglect.\n\n> No matter how expert you may be, well-designed checklists can improve outcomes. -- Steven Levitt\n\nJust knowing 'clearly' what you need to do or not is half the battle won. Write down activities that you need to do, as well as avoid them to be more productive. Things like - what to eat, what to wear, when to shop, how to use your apps, morning routines, sleep routines, etc.\n\n## 2. Cut it Out\n![Productivity  5.jpg](https://cdn.hashnode.com/res/hashnode/image/upload/v1622252203188/yyQzXGDZZ.jpeg)\n\nWhen we make too many decisions, we suffer from **[Decision Fatigue](https://en.wikipedia.org/wiki/Decision_fatigue)**. It leaves us with less energy for mentally demanding tasks, [killing creativity](https://www.scientificamerican.com/article/don-t-overthink-it-less-is-more-when-it-comes-to-creativity/), drive and, in turn, affects happiness.\n\n> The essence of strategy is choosing what not to do ― Michael Porter\n\nCutting out every unnecessary or unmade decision makes room and energy for productive ones. According to a [University of California Irvine study.](https://www.ics.uci.edu/~gmark/chi08-mark.pdf), it takes an average of 23 minutes to get back to a task after an interruption.\n\n**Try to estimate your focused time in a day as well as the cost of time breaks or energy leaks.** \nTo build momentum and maintain it. Simplify your day and daily routine with habits.\n\n## 3. Time It, Space It\n![Productivity3.jpg](https://cdn.hashnode.com/res/hashnode/image/upload/v1622252217370/GIEHQNCPA.jpeg)\nMornings are the natural way to start life. It's no wonder [most successful people start super early](https://youtu.be/qszsMyrChnE). After a good night's sleep, our body and brain are charged up for best performance. \n\nMake a list of priorities - starting with the most challenging task because your brain is fresh and ready to handle it earlier in the day. [Studies](https://www.pnas.org/content/pnas/108/17/6889.full.pdf) have shown how the time of day affects good decision making and productivity.\n\n> \"In preparing for battle, I have always found that plans are useless, but planning is indispensable.\" ― Dwight D. Eisenhower\n\nAs there's no such thing as 'stability' in life, make mental and practical space to account for new or unexpected situations. Take breaks or a quick nap to recharge during the day. Intentionally STOP making decisions. \nLeave room for new beginnings which usually take time and space, and let your brain sort things at its own pace.\n\n## 4. Make it Right\n![Productivity 4.jpg](https://cdn.hashnode.com/res/hashnode/image/upload/v1622252229991/2iPsZHHA_.jpeg)\nIdentify your purpose – and make sure it's right. Please write down your goals and objectives to achieve them, and review them. Everything you do during the day, week, and year must align with this purpose, getting more efficient with time. Build habits around your goals.\n\n> If you have a strong purpose in life, you don't have to be pushed. Your passion will drive you there. ― Roy T. Bennett\n\nGet a second opinion or some sound advice on your ideas to avoid your own cognitive biases. And be ready to iterate on your decisions based on outcomes. Iterative decision-making is faster, efficient, and leads to better results.\n\nIt doesn't matter how 'right' our choice is, but how motivated and committed we are to make it right. Having an actionable plan with the best decision is what leads to a success story.\n\n## 5. Just Do It\nNo amount of thinking or planning can take you closer to your goals. You have to give it a try and get started. Take action and be ready to fail. But pick yourself up and try again. Or change the course.\n\n![Productivity 6.jpg](https://cdn.hashnode.com/res/hashnode/image/upload/v1622252267328/2XOHfUquJ.jpeg)\n\n>\"Unless commitment is made, there are only promises and hopes; but no plans.\" ― Peter F. Drucker\n\nIn summary, decision-making is more exhausting than any other mental activity.\nIt's a lot of tiny things that make you or break you. So be mindful of how you regard them. Understand the proven and sustainable methods that seem dull or straightforward, but work. \nTweak them to suit your purpose. Avoid all sorts of distractions as much as possible. Respect your mind and body. \n\nBelieve in yourself, work hard and stay healthy!\n\n",
      "hasPolls": false,
      "totalPollVotes": 0,
      "upvotes": 0,
      "downvotes": 0,
      "tags": [
        "56744721958ef13879b94a60",
        "57ed528897eba84632db5b88",
        "56fe3b2e7a82968f9f7d51c1",
        "5f2e55763b12e25afe3e4d05",
        "56744723958ef13879b952d7"
      ],
      "untaggedFrom": [],
      "upvotedBy": [],
      "downvotedBy": [],
      "popularity": 4744.478,
      "responses": [],
      "responseCount": 0,
      "replyCount": 0,
      "followers": [],
      "isActive": true,
      "isFeatured": false,
      "isEngaging": false,
      "answeredByTarget": false,
      "inviters": [],
      "isDelisted": false,
      "isNotified": false,
      "duplicatePosts": [],
      "numCollapsed": 0,
      "hasReward": false,
      "bookmarkedIn": [],
      "similarPostIds": [],
      "reactions": [],
      "totalReactions": 0,
      "reactionsByCurrentUser": [],
      "totalReactionsByCurrentUser": 0,
      "isPinnedToBlog": false,
      "disableComments": false,
      "commentsPaused": false,
      "hasLatex": false,
      "syncAlgolia": false,
      "enableToc": false,
      "toc": [],
      "numUniqueUsersWhoReacted": 0,
      "_id": "60b594465302e8579db4bd68",
      "title": "A Developer's Guide to Productivity",
      "subtitle": "Tiny things that make or break you!",
      "type": "story",
      "ogImage": "",
      "metaTitle": "Developer's Guide to Productivity",
      "metaDescription": "A simple guide to improve your decision making, with 5 steps to take action.",
      "isRepublished": false,
      "originalArticleURL": "",
      "partOfPublication": true,
      "publication": "60ab47fe5379f65d10b627b5",
      "slug": "a-developers-guide-to-productivity",
      "importedFromMedium": false,
      "dateAdded": "2021-06-01T01:58:30.334Z",
      "hasCustomDate": false,
      "stickCoverToBottom": false,
      "pollOptions": [],
      "badges": [],
      "questionReplies": [],
      "contributors": [],
      "cuid": "ckpde6br809mkb1s10sclashh",
      "author": "60ab47da5379f65d10b627b1",
      "followersCount": 1,
      "draft": "60b098135c02001765cf5495",
      "hasPinnedTag": false,
      "readTime": 4,
      "__v": 0,
      "series": null,
      "dateUpdated": "2021-06-01T02:24:13.160Z",
      "pendingPublicationApproval": false,
      "viewsUpdatedOn": 1672988463436,
      "uniqueReactions": [],
      "reactionToCountMapUnique": { "any": 1 },
      "id": "60b594465302e8579db4bd68"
    },
    {
      "reward": { "type": "xlm" },
      "sourcedFromGithub": false,
      "githubAsSourceMeta": null,
      "isAnonymous": false,
      "views": 351,
      "slugOverridden": false,
      "coverImage": "https://cdn.hashnode.com/res/hashnode/image/upload/v1622002036842/X5EA5bdPe.jpeg",
      "autoGeneratedCover": "",
      "brief": "Being aware of what the best minds are up to in the tech inspires and helps many. Be it a new technology, know-how, best practices, or your mistakes. It definitely makes someone's life easier. \nSo here I am setting up my own blog and trying to   Lear...",
      "content": "<p>Being aware of what the best minds are up to in the tech inspires and helps many. Be it a new technology, know-how, best practices, or your mistakes. It definitely makes someone's life easier. </p>\n<p>So here I am setting up my own blog and trying to  <a target=\"_blank\" href=\"https://www.swyx.io/learn-in-public/\"> <a target=\"_blank\" href=\"Link\">Learn in Public</a> </a>, so it helps me and others.</p>\n<p>An active and useful blog also adds value in building a 'tech' brand. But how do I get started? Writing is not natural to me. Code is. </p>\n<p>While looking for a writing framework, I found how to break down the process and make it doable.</p>\n<p>Defining the WHY?\n<img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1622079276195/VrKYtx8LS.png\" alt=\"Define Why.png\" /></p>\n<p>Having a clear understanding of the purpose of the blog makes it much easier to pen it. So why would you write?</p>\n<p><strong>1. To help you think and understand better </strong></p>\n<p>Writing things will bring clarity and structure to concepts which are vague and unstructured. Writing helps you think better.</p>\n<p><strong>2. A Personal Problem Solving Story</strong></p>\n<p>Documenting a personal problem you solved or an alternative solution you found. It will also help your future self.</p>\n<p><strong>3. Share Knowledge</strong></p>\n<p>To let others know what you do and how you do it. Writing to teach and simplify ideas is a valuable skill that gets you recognized.</p>\n<p>Now let's dive in!</p>\n<p><strong>    1. Create an outline for your post.\n</strong></p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1622079440522/Crj6D8i0w.jpeg\" alt=\"outline.jpg\" /></p>\n<ul>\n<li><p>Introduction - give some context, how it started (make it personal) and where this post fits in the bigger picture. Also, tell what to expect in the next sections. It is easier to think of a problem you encountered and then go on to explain the process.</p>\n</li>\n<li><p>Main points - deliver what you promised. \nBut direct the flow with proper signs and necessary lists and formatting. Here's where you give the solution.</p>\n</li>\n<li><p>Conclusion - summarize the post for those who stuck till the end and those who skipped right to the bottom. This will give them something to take back or go and read the post with interest.</p>\n</li>\n</ul>\n<p><strong>2. Have a kickass topic name </strong></p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1622079650854/NcJB8j-qJ.jpeg\" alt=\"eye grab.jpg\" />\nWhich grabs eyeballs! This is how you get people to read what you write. </p>\n<p><strong>3. Keep it short, Keep it simple</strong></p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1622079719946/7g5uFmJBG.jpeg\" alt=\"short and simple.jpg\" />\nAs much as possible! Try to summarize huge paragraphs into 2-3 sentences where you can. Add references or other links where necessary, rather than explaining in detail.</p>\n<p><strong>4. Break it down! Use lots of subheaders</strong>\n<img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1622079910611/t10Eb-hV4.jpeg\" alt=\"break it down.jpeg\" />\nPeople have short attention spans, and most only scan a post before even reading everything. So break it down into smaller headings and try to tell a story with that. </p>\n<p><strong>5. Code! And  Pics! And Gifs! And Graphs!</strong></p>\n<blockquote>\n<p>A picture is worth a thousand words</p>\n</blockquote>\n<p>Use 'em because people love visuals and remember it better. It also makes the post more humane, relatable, and enjoyable. And give credit where it's due.</p>\n<p><strong>6. Check it!</strong></p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1622080950984/5yTC0Dd6o.jpeg\" alt=\"check it.jpeg\" />\nBefore you publish - proofread, get a second opinion and always be ready to edit!</p>\n<p>Keep in mind -\nHas it helped you? Can it help someone else too?\n<img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1622081001114/ezpLjboJG.jpeg\" alt=\"philip-veater-Y58Sww9SR1c-unsplash.jpg\" />\nWhen you write, keep in the aim in mind. If you've spent hours learning a skill to solve a problem and can teach it to someone in a few minutes - that’s great!</p>\n<p><img src=\"https://cdn.hashnode.com/res/hashnode/image/upload/v1622080891245/0ZzZnYT2_.jpeg\" alt=\"help happy.jpg\" />\nAnd also, just because it isn't the \"best article\" on your topic doesn't mean that there's no point in writing it. Your personal experience is valuable, even if it doesn't seem to you.</p>\n<p>Remember, sharing is caring. ^_^</p>\n",
      "contentMarkdown": "Being aware of what the best minds are up to in the tech inspires and helps many. Be it a new technology, know-how, best practices, or your mistakes. It definitely makes someone's life easier. \n\nSo here I am setting up my own blog and trying to  [ [Learn in Public](Link) ](https://www.swyx.io/learn-in-public/), so it helps me and others.\n\nAn active and useful blog also adds value in building a 'tech' brand. But how do I get started? Writing is not natural to me. Code is. \n\nWhile looking for a writing framework, I found how to break down the process and make it doable.\n\nDefining the WHY?\n![Define Why.png](https://cdn.hashnode.com/res/hashnode/image/upload/v1622079276195/VrKYtx8LS.png)\n\nHaving a clear understanding of the purpose of the blog makes it much easier to pen it. So why would you write?\n\n**1. To help you think and understand better **\n\nWriting things will bring clarity and structure to concepts which are vague and unstructured. Writing helps you think better.\n\n\n**2. A Personal Problem Solving Story**\n\nDocumenting a personal problem you solved or an alternative solution you found. It will also help your future self.\n\n**3. Share Knowledge**\n\nTo let others know what you do and how you do it. Writing to teach and simplify ideas is a valuable skill that gets you recognized.\n\nNow let's dive in!\n\n**\t1. Create an outline for your post.\n**\n\n![outline.jpg](https://cdn.hashnode.com/res/hashnode/image/upload/v1622079440522/Crj6D8i0w.jpeg)\n\n- Introduction - give some context, how it started (make it personal) and where this post fits in the bigger picture. Also, tell what to expect in the next sections. It is easier to think of a problem you encountered and then go on to explain the process.\n\n- Main points - deliver what you promised. \nBut direct the flow with proper signs and necessary lists and formatting. Here's where you give the solution.\n\n- Conclusion - summarize the post for those who stuck till the end and those who skipped right to the bottom. This will give them something to take back or go and read the post with interest.\n\n**2. Have a kickass topic name **\n\n![eye grab.jpg](https://cdn.hashnode.com/res/hashnode/image/upload/v1622079650854/NcJB8j-qJ.jpeg)\nWhich grabs eyeballs! This is how you get people to read what you write. \n\n**3. Keep it short, Keep it simple**\n\n![short and simple.jpg](https://cdn.hashnode.com/res/hashnode/image/upload/v1622079719946/7g5uFmJBG.jpeg)\nAs much as possible! Try to summarize huge paragraphs into 2-3 sentences where you can. Add references or other links where necessary, rather than explaining in detail.\n\n**4. Break it down! Use lots of subheaders**\n![break it down.jpeg](https://cdn.hashnode.com/res/hashnode/image/upload/v1622079910611/t10Eb-hV4.jpeg)\nPeople have short attention spans, and most only scan a post before even reading everything. So break it down into smaller headings and try to tell a story with that. \n\n**5. Code! And  Pics! And Gifs! And Graphs!**\n\n> A picture is worth a thousand words\n\nUse 'em because people love visuals and remember it better. It also makes the post more humane, relatable, and enjoyable. And give credit where it's due.\n\n**6. Check it!**\n\n![check it.jpeg](https://cdn.hashnode.com/res/hashnode/image/upload/v1622080950984/5yTC0Dd6o.jpeg)\nBefore you publish - proofread, get a second opinion and always be ready to edit!\n\nKeep in mind -\nHas it helped you? Can it help someone else too?\n![philip-veater-Y58Sww9SR1c-unsplash.jpg](https://cdn.hashnode.com/res/hashnode/image/upload/v1622081001114/ezpLjboJG.jpeg)\nWhen you write, keep in the aim in mind. If you've spent hours learning a skill to solve a problem and can teach it to someone in a few minutes - that’s great!\n\n![help happy.jpg](https://cdn.hashnode.com/res/hashnode/image/upload/v1622080891245/0ZzZnYT2_.jpeg)\nAnd also, just because it isn't the \"best article\" on your topic doesn't mean that there's no point in writing it. Your personal experience is valuable, even if it doesn't seem to you.\n\nRemember, sharing is caring. ^_^",
      "hasPolls": false,
      "totalPollVotes": 0,
      "upvotes": 0,
      "downvotes": 0,
      "tags": [
        "56744721958ef13879b94c7e",
        "56fe3b2e7a82968f9f7d51c1",
        "56744722958ef13879b94f1b",
        "56744721958ef13879b94cad",
        "56744723958ef13879b95434"
      ],
      "untaggedFrom": [
        "56744721958ef13879b94c7e",
        "56744722958ef13879b94f1b",
        "56fe3b2e7a82968f9f7d51c1",
        "56744721958ef13879b94cad",
        "56744723958ef13879b95434"
      ],
      "upvotedBy": [],
      "downvotedBy": [],
      "popularity": 4736.7683,
      "responses": [],
      "responseCount": 0,
      "replyCount": 0,
      "followers": [],
      "isActive": true,
      "isFeatured": false,
      "isEngaging": false,
      "answeredByTarget": false,
      "inviters": [],
      "isDelisted": true,
      "isNotified": false,
      "duplicatePosts": [],
      "numCollapsed": 0,
      "hasReward": false,
      "bookmarkedIn": [],
      "similarPostIds": [],
      "reactions": [],
      "totalReactions": 0,
      "reactionsByCurrentUser": [],
      "totalReactionsByCurrentUser": 0,
      "isPinnedToBlog": false,
      "disableComments": false,
      "commentsPaused": false,
      "hasLatex": false,
      "syncAlgolia": false,
      "enableToc": false,
      "toc": [],
      "numUniqueUsersWhoReacted": 0,
      "_id": "60b0490f5c02001765cf4e8b",
      "title": "Anatomy of a Tech Blog",
      "subtitle": "Break it down, to build it up!",
      "type": "story",
      "ogImage": "",
      "metaTitle": "Anatomy of a Tech Blog",
      "metaDescription": "This simple blog will explain how to get started in writing a tech blog. Find out the why and how of easy writing, while I am learning to learn in public.",
      "isRepublished": false,
      "originalArticleURL": "",
      "partOfPublication": true,
      "publication": "60ab47fe5379f65d10b627b5",
      "slug": "anatomy-of-a-tech-blog",
      "importedFromMedium": false,
      "dateAdded": "2021-05-28T01:36:15.107Z",
      "hasCustomDate": false,
      "stickCoverToBottom": true,
      "pollOptions": [],
      "badges": [],
      "questionReplies": [],
      "contributors": [],
      "cuid": "ckp7nmatk0i0mmds10vs7ebb7",
      "author": "60ab47da5379f65d10b627b1",
      "followersCount": 1,
      "draft": "60adce8d557cc70e51211ee7",
      "hasPinnedTag": false,
      "readTime": 3,
      "__v": 0,
      "series": null,
      "dateUpdated": "2021-05-31T13:10:24.321Z",
      "pendingPublicationApproval": false,
      "viewsUpdatedOn": 1673280065165,
      "uniqueReactions": [],
      "reactionToCountMapUnique": { "any": 1 },
      "id": "60b0490f5c02001765cf4e8b"
    },
    {
      "reward": { "type": "xlm" },
      "sourcedFromGithub": false,
      "githubAsSourceMeta": null,
      "isAnonymous": false,
      "views": 558,
      "slugOverridden": false,
      "coverImage": "https://cdn.hashnode.com/res/hashnode/image/upload/v1622001482982/AschKD7zW.jpeg",
      "autoGeneratedCover": "",
      "brief": "When you're learning rescript, you would want to render your Reactjs app to a DOM node. It is not as simple as ReactDom.render(<App/>, #root).\nHere is how you can do it.\nFirst, go ahead install bs-webapi by running this command\nnpm install --save bs-...",
      "content": "<p>When you're learning rescript, you would want to render your Reactjs app to a DOM node. It is not as simple as <code>ReactDom.render(&lt;App/&gt;, #root)</code>.</p>\n<p>Here is how you can do it.</p>\n<p>First, go ahead install <code>bs-webapi</code> by running this command</p>\n<pre><code>npm <span class=\"hljs-keyword\">install</span> <span class=\"hljs-comment\">--save bs-webapi</span>\n</code></pre><p>Add the entry to bsconfig.json</p>\n<pre><code><span class=\"hljs-string\">\"bs-dependencies\"</span>: [<span class=\"hljs-string\">\"bs-webapi\"</span>],\n</code></pre><p>use the following snippet</p>\n<pre><code>open Webapi.Dom\nopen Belt\n\ndocument\n-&gt;Document.asHtmlDocument\n-&gt;<span class=\"hljs-built_in\">Option</span>.flatMap(document =&gt; document-&gt;HtmlDocument.body)\n-&gt;<span class=\"hljs-built_in\">Option</span>.map(body =&gt; {\n  <span class=\"hljs-keyword\">let</span> root = document-&gt;Document.createElement(<span class=\"hljs-string\">\"div\"</span>, _)\n  root-&gt;Element.setId(<span class=\"hljs-string\">\"app\"</span>)\n  <span class=\"hljs-comment\">// ReactDOM.render(&lt;App /&gt;, root) // if you are using react</span>\n  root-&gt;Element.appendChild(body)\n})\n-&gt;ignore\n</code></pre><p>Edit: We can also write our own bindings for maintainability as suggested by  <a target=\"_blank\" href=\"https://twitter.com/ryyppy\">Patrick Ecker</a> over <a target=\"_blank\" href=\"https://forum.rescript-lang.org/t/how-to-append-child-to-the-body-with-rescript/1735\">here</a></p>\n<pre><code><span class=\"hljs-keyword\">module</span> Webapi = {\n  <span class=\"hljs-keyword\">module</span> Element = {\n    <span class=\"hljs-meta\">@set</span> external setId: <span class=\"hljs-function\">(<span class=\"hljs-params\">Dom.element, <span class=\"hljs-built_in\">string</span></span>) =&gt;</span> unit = <span class=\"hljs-string\">\"id\"</span>\n    <span class=\"hljs-meta\">@send</span>\n    external appendChild: <span class=\"hljs-function\">(<span class=\"hljs-params\">Dom.element, Dom.element</span>) =&gt;</span> unit = <span class=\"hljs-string\">\"appendChild\"</span>\n  }\n\n  <span class=\"hljs-keyword\">module</span> Document = {\n    <span class=\"hljs-meta\">@val</span> external <span class=\"hljs-built_in\">document</span>: Dom.document = <span class=\"hljs-string\">\"document\"</span>\n    <span class=\"hljs-meta\">@get</span> external body: Dom.document =&gt; Dom.element = <span class=\"hljs-string\">\"body\"</span>\n    <span class=\"hljs-meta\">@send</span> external createElement: <span class=\"hljs-function\">(<span class=\"hljs-params\">t, <span class=\"hljs-built_in\">string</span></span>) =&gt;</span> Dom.element = <span class=\"hljs-string\">\"createElement\"</span>\n  }\n}\n\nopen Webapi\n\n<span class=\"hljs-keyword\">let</span> body = {\n  open Document\n  <span class=\"hljs-built_in\">document</span>-&gt;body\n}\n\n<span class=\"hljs-keyword\">let</span> root = Document.createElement(<span class=\"hljs-string\">\"div\"</span>)\n\nElement.appendChild(body, root)\n</code></pre><p><a target=\"_blank\" href=\"https://rescript-lang.org/try?code=LYewJgrgNgpgBAdRgIwIYAcCWcC8cDeAUHHKJLHAKKzAwB2ALrgcSXAAIDOMTMAHgxgAnOqihxuDAJJgAXHAAUAERDAAdDBr0GAGgkMhmOgHMAlLgB8cCHUxM8AIkxgHrEl3pg3cfoJFi4DHRPAGEAC0woOUUVdU0YWkY9WI0tRnMcKxs7Zgcg0Iio1xIAX0JWMmh4FQBjCET7FjY4BgBPYJby5vYANwDfYVFxMBA6hvlGhxGx7WK2dmMeHwFBgORwVonLOBT4htz1sFa59246MGW-IbgaoRhUQWoE7XkFXX1DEwyrXbTJ2-ujz+czKZUIIGCdEQKAwmHKsCYh1azCIJAh9B2o3q2lY02xjAAtBYkYQwQi4EIQCBGrV8Qw1HiGkTaQ01ACHjAng0FFNMD0HKZylztGp8udwpEwAokXpKdTBUA\">Playground</a></p>\n",
      "contentMarkdown": "When you're learning rescript, you would want to render your Reactjs app to a DOM node. It is not as simple as `ReactDom.render(<App/>, #root)`.\n\nHere is how you can do it.\n\nFirst, go ahead install `bs-webapi` by running this command\n\n```\nnpm install --save bs-webapi\n```\n\nAdd the entry to bsconfig.json\n```\n\"bs-dependencies\": [\"bs-webapi\"],\n```\n\nuse the following snippet\n```\nopen Webapi.Dom\nopen Belt\n\ndocument\n->Document.asHtmlDocument\n->Option.flatMap(document => document->HtmlDocument.body)\n->Option.map(body => {\n  let root = document->Document.createElement(\"div\", _)\n  root->Element.setId(\"app\")\n  // ReactDOM.render(<App />, root) // if you are using react\n  root->Element.appendChild(body)\n})\n->ignore\n```\n\nEdit: We can also write our own bindings for maintainability as suggested by  [Patrick Ecker](https://twitter.com/ryyppy) over [here](https://forum.rescript-lang.org/t/how-to-append-child-to-the-body-with-rescript/1735)\n```\nmodule Webapi = {\n  module Element = {\n    @set external setId: (Dom.element, string) => unit = \"id\"\n    @send\n    external appendChild: (Dom.element, Dom.element) => unit = \"appendChild\"\n  }\n\n  module Document = {\n    @val external document: Dom.document = \"document\"\n    @get external body: Dom.document => Dom.element = \"body\"\n    @send external createElement: (t, string) => Dom.element = \"createElement\"\n  }\n}\n\nopen Webapi\n\nlet body = {\n  open Document\n  document->body\n}\n\nlet root = Document.createElement(\"div\")\n\nElement.appendChild(body, root)\n\n```\n[Playground](https://rescript-lang.org/try?code=LYewJgrgNgpgBAdRgIwIYAcCWcC8cDeAUHHKJLHAKKzAwB2ALrgcSXAAIDOMTMAHgxgAnOqihxuDAJJgAXHAAUAERDAAdDBr0GAGgkMhmOgHMAlLgB8cCHUxM8AIkxgHrEl3pg3cfoJFi4DHRPAGEAC0woOUUVdU0YWkY9WI0tRnMcKxs7Zgcg0Iio1xIAX0JWMmh4FQBjCET7FjY4BgBPYJby5vYANwDfYVFxMBA6hvlGhxGx7WK2dmMeHwFBgORwVonLOBT4htz1sFa59246MGW-IbgaoRhUQWoE7XkFXX1DEwyrXbTJ2-ujz+czKZUIIGCdEQKAwmHKsCYh1azCIJAh9B2o3q2lY02xjAAtBYkYQwQi4EIQCBGrV8Qw1HiGkTaQ01ACHjAng0FFNMD0HKZylztGp8udwpEwAokXpKdTBUA)\n\n",
      "hasPolls": false,
      "totalPollVotes": 0,
      "upvotes": 0,
      "downvotes": 0,
      "tags": [
        "586556eab99398bc30c43c9a",
        "56744723958ef13879b95376",
        "56744721958ef13879b94cad",
        "568f5c6beea132481d017c36",
        "56744723958ef13879b95434"
      ],
      "untaggedFrom": [],
      "upvotedBy": [],
      "downvotedBy": [],
      "popularity": 4731.3095,
      "responses": [],
      "responseCount": 0,
      "replyCount": 0,
      "followers": [],
      "isActive": true,
      "isFeatured": false,
      "isEngaging": false,
      "answeredByTarget": false,
      "inviters": [],
      "isDelisted": false,
      "isNotified": false,
      "duplicatePosts": [],
      "numCollapsed": 0,
      "hasReward": false,
      "bookmarkedIn": [],
      "similarPostIds": [],
      "reactions": [],
      "totalReactions": 0,
      "reactionsByCurrentUser": [],
      "totalReactionsByCurrentUser": 0,
      "isPinnedToBlog": false,
      "disableComments": false,
      "commentsPaused": false,
      "hasLatex": false,
      "syncAlgolia": false,
      "enableToc": false,
      "toc": [],
      "numUniqueUsersWhoReacted": 0,
      "_id": "60ac897f61f5f47b572b7048",
      "title": "How to append child to the body with Rescript",
      "subtitle": "",
      "type": "story",
      "ogImage": "https://cdn.hashnode.com/res/hashnode/image/upload/v1621920616889/RPm6zmrx9.png",
      "metaDescription": "Learn how to append your reactjs app to the DOM in rescript",
      "partOfPublication": true,
      "publication": "60ab47fe5379f65d10b627b5",
      "slug": "how-to-append-child-to-the-body-with-rescript",
      "pollOptions": [],
      "dateAdded": "2021-05-25T05:22:07.529Z",
      "badges": [],
      "questionReplies": [],
      "contributors": [],
      "cuid": "ckp3ld7yu095id3s19cw1g6wu",
      "author": "60ab47da5379f65d10b627b1",
      "followersCount": 1,
      "draft": "60ac87ca61f5f47b572b6fe6",
      "isRepublished": false,
      "hasPinnedTag": false,
      "readTime": 1,
      "__v": 2,
      "series": null,
      "dateUpdated": "2021-05-28T02:13:25.999Z",
      "pendingPublicationApproval": false,
      "metaTitle": "How to append child to the body with rescript",
      "stickCoverToBottom": false,
      "viewsUpdatedOn": 1673020865627,
      "uniqueReactions": [],
      "reactionToCountMapUnique": { "any": 1 },
      "id": "60ac897f61f5f47b572b7048"
    },
    {
      "reward": { "type": "xlm" },
      "sourcedFromGithub": false,
      "githubAsSourceMeta": null,
      "isAnonymous": false,
      "views": 7,
      "slugOverridden": false,
      "coverImage": "",
      "autoGeneratedCover": "",
      "brief": "This is a Hello world kinda story",
      "content": "<p>This is a Hello world kinda story</p>\n",
      "contentMarkdown": "This is a Hello world kinda story",
      "hasPolls": false,
      "totalPollVotes": 0,
      "upvotes": 0,
      "downvotes": 0,
      "tags": ["591d0f67b5bbb96606f07af4"],
      "untaggedFrom": ["591d0f67b5bbb96606f07af4"],
      "upvotedBy": [],
      "downvotedBy": [],
      "popularity": 4729.49,
      "responses": [],
      "responseCount": 0,
      "replyCount": 0,
      "followers": [],
      "isActive": false,
      "isFeatured": false,
      "isEngaging": false,
      "answeredByTarget": false,
      "inviters": [],
      "isDelisted": true,
      "isNotified": false,
      "duplicatePosts": [],
      "numCollapsed": 0,
      "hasReward": false,
      "bookmarkedIn": [],
      "similarPostIds": [],
      "reactions": [],
      "totalReactions": 0,
      "reactionsByCurrentUser": [],
      "totalReactionsByCurrentUser": 0,
      "isPinnedToBlog": false,
      "disableComments": false,
      "commentsPaused": false,
      "hasLatex": false,
      "syncAlgolia": false,
      "enableToc": false,
      "toc": [],
      "numUniqueUsersWhoReacted": 0,
      "_id": "60ab49ab5379f65d10b627d9",
      "title": "Hello world",
      "subtitle": "",
      "type": "story",
      "partOfPublication": true,
      "publication": "60ab47fe5379f65d10b627b5",
      "slug": "hello-world",
      "pollOptions": [],
      "dateAdded": "2021-05-24T06:37:31.241Z",
      "badges": [],
      "questionReplies": [],
      "contributors": [],
      "cuid": "ckp28mbrz0u1ndss14h6q6smx",
      "author": "60ab47da5379f65d10b627b1",
      "followersCount": 1,
      "draft": "60ab497320d1f45ceb7f0f18",
      "isRepublished": false,
      "hasPinnedTag": false,
      "readTime": 1,
      "__v": 0,
      "series": null,
      "dateUpdated": "2021-05-24T08:40:30.742Z",
      "pendingPublicationApproval": false,
      "uniqueReactions": [],
      "reactionToCountMapUnique": { "any": 1 },
      "id": "60ab49ab5379f65d10b627d9"
    }
  ]
}
